scriptencoding utf-8
filetype off
set mouse = ""

" Sane tabs
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set formatoptions=tcrq
set textwidth=80
set title

" Use comma for leader
let g:mapleader=','
let g:maplocalleader='\\'

set number
set omnifunc=syntaxcomplete#Complete

" Search settings
set hlsearch
set incsearch
set ignorecase
set smartcase
map <CR> :noh<CR>

" Highlight cursor position
" set cursorline
" set cursorcolumn

""" Undo #undo
" undofile - This allows you to use undos after exiting and restarting
" This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
" :help undo-persistence
" This is only present in 7.3+
if isdirectory($HOME . '/.config/nvim/undo') == 0
  :silent !mkdir -p ~/.config/nvim/undo > /dev/null 2>&1
endif
set undodir=./.vim-undo//
set undodir+=~/.vim/undo//
set undofile

call plug#begin('~/.config/nvim/plugged')
" Multi-lang support
Plug 'sheerun/vim-polyglot'

Plug 'neomake/neomake'
augroup localneomake
  autocmd! BufWritePost * Neomake
augroup END
let g:neomake_markdown_enabled_makers = []

"Phoenix project navigation
Plug 'c-brenn/phoenix.vim'
Plug 'tpope/vim-projectionist'

Plug 'slashmili/alchemist.vim'
let g:alchemist#elixir_erlang_src = "/usr/local/share/src"

Plug 'powerman/vim-plugin-AnsiEsc'

Plug 'editorconfig/editorconfig-vim'

Plug 'tomtom/tcomment_vim'
" By default, `gc` will toggle comments

Plug 'janko-m/vim-test'
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
let g:test#strategy = 'neovim'

" Vim git
Plug 'tpope/vim-fugitive'

" Go to file
Plug 'ctrlpvim/ctrlp.vim'
  let g:ctrlp_custom_ignore = {
    \ 'dir': '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(beam|exe|dll)$',
    \ }

" Fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
let $FZF_DEFAULT_COMMAND = 'ag -ignore-dir=priv/static -g ""'
let g:fzf_layout = { 'window': 'enew' }
nnoremap <silent> <C-F> :FZF<CR>
nnoremap <silent> <leader>a :Ag<CR>
augroup localfzf
  autocmd!
  autocmd FileType fzf :tnoremap <buffer> <C-J> <C-J>
  autocmd FileType fzf :tnoremap <buffer> <C-K> <C-K>
augroup END

" Gundo fork with neovim support
Plug 'simnalamburt/vim-mundo'
noremap <F5> :MundoToggle<CR>

Plug 'mileszs/ack.vim'
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
end

Plug 'Raimondi/delimitMate'
Plug 'godlygeek/tabular'
Plug 'mattn/emmet-vim'
let g:user_emmet_leader_key=','

Plug 'majutsushi/tagbar'
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_elixir = {
      \ 'ctagstype' : 'elixir',
      \ 'kinds' : [
      \ 'f:functions',
      \ 'functions:functions',
      \ 'c:callbacks',
      \ 'd:delegates',
      \ 'e:exceptions',
      \ 'i:implementations',
      \ 'a:macros',
      \ 'o:operators',
      \ 'm:modules',
      \ 'p:protocols',
      \ 'r:records',
      \ 't:test'
      \ ]
      \ }

Plug 'dietsche/vim-lastplace'

Plug 'tomasr/molokai'

Plug 'tpope/vim-surround'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme = 'luna'
let g:bufferline_echo = 0
let g:airline_powerline_fonts = 11
let g:airline_enable_branch = 1
let g:airline_enable_systastic = 1
let g:airline_branch_prefix = '⎇ '
let g:airline_paste_symbol = '∥'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#tabline#enabled = 0

" Code completion
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  let g:deoplete#enable_at_startup = 1
  if !exists('g:deoplete#omni#input_patterns')
    let g:deoplete#omni#input_patterns = {}
  endif
  " use tab for completion (not working with UltiSnips currently)
  inoremap <expr><Tab> pumvisible() ? "\<c-n>" : "\<Tab>"
  inoremap <expr><S-Tab> pumvisible() ? "\<c-p>" : "\<S-Tab>"

call plug#end()

set background=dark
colorscheme molokai
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

" Shortcuts
nnoremap <leader>w :w<CR>
noremap <C-c> :q<CR>

set scrolloff=5
vnoremap < <gv
vnoremap > >gv

map <Left>  :echo "no!"<cr>
map <Right> :echo "no!"<cr>
map <Up>    :echo "no!"<cr>
map <Down>  :echo "no!"<cr>

set splitbelow
set splitright

" Navigate splits with C-h,j,k,l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <silent> <BS> <C-w>h

" Delete trailing whitespace on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
au BufWrite * silent call DeleteTrailingWS()
