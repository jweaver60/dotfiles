set nocompatible
set mouse=a
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set formatoptions=tcrq
set textwidth=80
set title
set laststatus=2
set nospell
set visualbell
set noerrorbells
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set autoindent
set copyindent
set backspace=indent,eol,start
set smartindent
set showmatch
set foldmethod=manual

let g:mapleader=','
let g:maplocalleader='\\'

set number
set omnifunc=syntaxcomplete#Complete

set hlsearch
set incsearch
set ignorecase
set smartcase
map <CR> :noh<CR>

call plug#begin('~/.vim/plugged')

Plug 'sheerun/vim-polyglot'
  let g:polyglot_disabled = ['javascript']

Plug 'othree/yajs.vim'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
  let g:UltiSnipsExpandTrigger="<C-k>"
  let g:UltiSnipsJumpForwardTrigger="<C-b>"
  let g:UltiSnipsJumpBackwardTrigger="<C-z>"

Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' }

Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'
Plug 'mbbill/undotree'
  nnoremap <F5> :UndotreeToggle<CR>

Plug 'godlygeek/tabular'

Plug 'majutsushi/tagbar'
  nmap <F8> :TagbarToggle<CR>
  let g:tagbar_type_elixir = {
    \ 'ctagstype' : 'elixir',
    \ 'kinds' : [
      \ 'f:functions',
      \ 'functions:functions',
      \ 'c:callbacks',
      \ 'd:delegates',
      \ 'e:exceptions',
      \ 'i:implementations',
      \ 'a:macros',
      \ 'o:operators',
      \ 'm:modules',
      \ 'p:protocols',
      \ 'r:records',
      \ 't:test'
    \ ]
    \ }

Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'

Plug 'tomtom/tcomment_vim'

Plug 'mattn/emmet-vim'
  let g:user_emmet_leader_key=','

Plug 'janko-m/vim-test'
  nmap <silent> <leader>t :TestNearest<CR>
  nmap <silent> <leader>T :TestFile<CR>
  nmap <silent> <leader>a :TestSuite<CR>
  nmap <silent> <leader>l :TestLast<CR>
  nmap <silent> <leader>g :TestVisit<CR>

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
  let $FZF_DEFAULT_COMMAND = 'ag -ignore-dir=priv/static -g ""'
  let g:fzf_layout = { 'window': 'enew' }
  nnoremap <silent> <C-P> :FZF<CR>
  nnoremap <silent> <leader>a :Ag<CR>
  augroup localfzf
    autocmd!
    autocmd FileType fzf :tnoremap <buffer> <C-J> <C-J>
    autocmd FileType fzf :tnoremap <buffer> <C-K> <C-K>
  augroup END

Plug 'ctrlpvim/ctrlp.vim'
  let g:ctrlp_custom_ignore = {
    \ 'dir': '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(beam|exe|dll)$',
    \ }

Plug 'neomake/neomake'
  augroup localneomake
    autocmd! BufWritePost * Neomake
  augroup END

Plug 'c-brenn/phoenix.vim'
Plug 'tpope/vim-projectionist'
Plug 'slashmili/alchemist.vim'
  let g:alchemist#elixir_erlang_src = '/usr/local/share/src'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
  let g:airline_theme = 'luna'
  let g:bufferline_echo = 0
  let g:airline_powerline_fonts = 0
  let g:airline_enable_branch = 1
  let g:airline_enable_systastic = 1
  let g:airline_branch_prefix = '⎇ '
  let g:airline_paste_symbol = '∥'
  let g:airline_left_sep=''
  let g:airline_right_sep=''
  let g:airline#extensions#tabline#enabled = 0

Plug 'tomasr/molokai'
Plug 'edkolev/tmuxline.vim'
  let g:tmuxline_powerline_separators = 0

call plug#end()

set background=dark
colorscheme molokai
set colorcolumn=81

nnoremap <leader>w :w<CR>
noremap <C-c> :q<CR>

set undodir=~/.vim/undo//      " set undo directory
set directory=~/.vim/swap//    " set swap directory
set backupdir=~/.vim/backup//  " set backup directory
set viewdir=~/.vim/views//     " set views directory

set wildignore+=*/node_modules/*,*/_build/*

set scrolloff=5
vnoremap < <gv
vnoremap > >gv

map <Left>  :echo "no!"<CR>
map <Right> :echo "no!"<CR>
map <Up>    :echo "no!"<CR>
map <Down>  :echo "no!"<CR>

set splitbelow
set splitright

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <silent> <BS> <C-w>h

func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
au BufWrite * silent call DeleteTrailingWS()
