set nocompatible
set mouse=a
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set formatoptions=tcrq
set textwidth=80
set title
set laststatus=2
set nospell
set visualbell
set noerrorbells
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set autoindent
set copyindent
set backspace=indent,eol,start
set smartindent
set showmatch
set foldmethod=manual

let g:mapleader=','
let g:maplocalleader='\\'

set number
set omnifunc=syntaxcomplete#Complete

set hlsearch
set incsearch
set ignorecase
set smartcase
map <CR> :noh<CR>

call plug#begin('~/.vim/plugged')

Plug 'sheerun/vim-polyglot'
  let g:polyglot_disabled = ['javascript']

Plug 'othree/yajs.vim'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
  let g:UltiSnipsExpandTrigger="<C-k>"
  let g:UltiSnipsJumpForwardTrigger="<C-b>"
  let g:UltiSnipsJumpBackwardTrigger="<C-z>"


Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'
Plug 'mbbill/undotree'
  nnoremap <F5> :UndotreeToggle<CR>

Plug 'godlygeek/tabular'

Plug 'scrooloose/nerdtree'
  let NERDTreeShowHidden=1
  nnoremap <leader>n :NERDTreeToggle<CR>

Plug 'majutsushi/tagbar'
  nmap <F8> :TagbarToggle<CR>
  let g:tagbar_type_elixir = {
    \ 'ctagstype' : 'elixir',
    \ 'kinds' : [
      \ 'f:functions',
      \ 'functions:functions',
      \ 'c:callbacks',
      \ 'd:delegates',
      \ 'e:exceptions',
      \ 'i:implementations',
      \ 'a:macros',
      \ 'o:operators',
      \ 'm:modules',
      \ 'p:protocols',
      \ 'r:records',
      \ 't:test'
    \ ]
    \ }

Plug 'tpope/vim-fugitive'

Plug 'tomtom/tcomment_vim'

Plug 'mattn/emmet-vim'
  let g:user_emmet_leader_key=','

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
  let $FZF_DEFAULT_COMMAND = 'ag -g ""'
  let g:fzf_layout = { 'window': 'enew' }
  nnoremap <silent> <C-P> :FZF<CR>
  nnoremap <silent> <leader>a :Ag<CR>
  nnoremap <leader>b :Buffers<CR>
  augroup localfzf
    autocmd!
    autocmd FileType fzf :tnoremap <buffer> <C-J> <C-J>
    autocmd FileType fzf :tnoremap <buffer> <C-K> <C-K>
  augroup END

Plug 'neomake/neomake'
  augroup localneomake
    autocmd! BufWritePost * Neomake
  augroup END

Plug 'slashmili/alchemist.vim'
  let g:alchemist#elixir_erlang_src = '/usr/local/share/src'

Plug 'tpope/vim-rails'

Plug 'itchyny/lightline.vim'
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }

Plug 'tomasr/molokai'
Plug 'christoomey/vim-tmux-navigator'
Plug 'edkolev/tmuxline.vim'
  let g:tmuxline_powerline_separators = 0

call plug#end()

set background=dark
colorscheme molokai
set colorcolumn=81

nnoremap <leader>w :w<CR>
noremap <C-c> :q<CR>

set undodir=~/.vim/undo//      " set undo directory
set directory=~/.vim/swap//    " set swap directory
set backupdir=~/.vim/backup//  " set backup directory
set viewdir=~/.vim/views//     " set views directory

set wildignore+=*/node_modules/*,*/_build/*

set scrolloff=5
vnoremap < <gv
vnoremap > >gv

map <Left>  :echo "no!"<CR>
map <Right> :echo "no!"<CR>
map <Up>    :echo "no!"<CR>
map <Down>  :echo "no!"<CR>

set splitbelow
set splitright

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <silent> <BS> <C-w>h

augroup filetypedetect
  " always highlight Dockerfile correctly
  au BufNewFile,BufRead Dockerfile.* set filetype=dockerfile

  " always highlight elixir config files
  au BufNewFile,BufRead *.exs set filetype=elixir

  " always highlight nginx conf files
  au BufNewFile,BufRead docker-nginx.conf set filetype=nginx
augroup END

hi def link jsonKeyword Number
hi def link jsonTest    Number
hi def link jsonNumber  Function
hi def link jsonString  Type
hi def link jsonNull    String

func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
au BufWrite * silent call DeleteTrailingWS()
